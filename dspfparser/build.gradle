buildscript {

    repositories {
        mavenCentral()
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
    }
}


apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'idea'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serializationVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-cbor:$serializationVersion"

}

compileTestKotlin {
    sourceCompatibility = "$jvmVersion"
    targetCompatibility = "$jvmVersion"
}

compileKotlin {
    sourceCompatibility = "$jvmVersion"
    targetCompatibility = "$jvmVersion"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    compilerOptions {
        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.fromTarget("$jvmVersion"))
    }
}

task version {
    doLast {
        print "Version ${version}"
    }
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

// deploy
publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId jarikoGroupId
            artifactId 'dspfparser'
            version jarikoVersion
        }
    }
}

signing {
    if (!project.hasProperty("signing.keyId")) {
        println "$project.name - Signing disabled because signing.keyId property is not present, it is not an error!!!"
    }
    required {  project.hasProperty("signing.keyId") }
    sign publishing.publications.mavenJava
}

java {
    withJavadocJar()
    withSourcesJar()
}