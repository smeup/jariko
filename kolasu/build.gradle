/*
 * Copyright 2019 Sme.UP S.p.A.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//-----------------
//kolasu build script
//-----------------
buildscript {

    ext.antlrVersion = "${antlrVersion}"
    ext.junitVersion = "${junitVersion}"

    repositories {
        mavenCentral()
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
    }
}


apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'idea'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    implementation "org.antlr:antlr4:$antlrVersion"
    implementation "org.antlr:antlr4-runtime:$antlrVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serializationVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-cbor:$serializationVersion"

}

task version {
    doLast {
        print "Version ${version}"
    }
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

// deploy
publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId jarikoGroupId
            artifactId 'kolasu'
            version jarikoVersion
        }
    }
}

signing {
    if (!project.hasProperty("signing.keyId")) {
        println "$project.name - Signing disabled because signing.keyId property is not present, it is not an error!!!"
    }
    required {  project.hasProperty("signing.keyId") }
    sign publishing.publications.mavenJava
}

java {
    sourceCompatibility = "$jvmVersion"
    targetCompatibility = "$jvmVersion"
    withJavadocJar()
    withSourcesJar()
}

compileKotlin {
    kotlinOptions.jvmTarget = "$jvmVersion"
}