import java.text.SimpleDateFormat

//-----------------
//interpreter-core build script
//-----------------
buildscript {
    ext.kotlinVersion = "${kotlinVersion}"
    ext.jvmVersion = "${jvmVersion}"
    ext.antlr_version = '4.7.2'

    repositories {
        mavenCentral()
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-localrun/'
        }
        maven { url 'https://jitpack.io' }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

apply plugin: 'antlr'

def antlrVersion = ext.antlr_version
def generatedMain = "generated-src/antlr/main"
def generatedMainFile = file(generatedMain)

dependencies {
    antlr "org.antlr:antlr4:$antlr_version"
    compile "org.antlr:antlr4-runtime:$antlr_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile project(":kolasu")

    compile "org.apache.logging.log4j:log4j-api-kotlin:1.0.0"
    compile "org.apache.logging.log4j:log4j-api:2.12.1"
    compile "org.apache.logging.log4j:log4j-core:2.12.1"

    compile 'commons-io:commons-io:2.6'
    compile 'com.github.ajalt:clikt:2.1.0'

    compile 'com.github.ziggy42:kolor:0.0.2'

    compile "org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.0-RC"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-cbor:1.0.0-RC"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testCompile 'junit:junit:4.12'
    testCompile 'org.hsqldb:hsqldb:2.5.0'
    testCompile 'io.mockk:mockk:1.9'
}

configurations.all() {
    resolutionStrategy.force "org.antlr:antlr4-runtime:$antlrVersion"
    resolutionStrategy.force "org.antlr:antlr4-tool:$antlrVersion"
}

generateGrammarSource {
    inputs.files fileTree('src/main/antlr').include('**/*.g4')
    maxHeapSize = "64m"
    arguments += ['-package', 'com.smeup.rpgparser']
    outputDirectory = file(generatedMain + "/com/smeup/rpgparser")
}

compileJava {
    sourceCompatibility = "$jvmVersion"
    targetCompatibility = "$jvmVersion"
    dependsOn generateGrammarSource
    source generatedMainFile, sourceSets.main.java
}

compileTestKotlin {
    sourceCompatibility = "$jvmVersion"
    targetCompatibility = "$jvmVersion"
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
    kotlinOptions.jvmTarget = "$jvmVersion"
}

compileKotlin {
    sourceCompatibility = "$jvmVersion"
    targetCompatibility = "$jvmVersion"
    source generatedMainFile, sourceSets.main.java, sourceSets.main.kotlin
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
    kotlinOptions.jvmTarget = "$jvmVersion"
    dependsOn generateGrammarSource
}

clean {
    delete file(generatedMain)
    mkdir generatedMain
}

idea {
    module {
        println 'Adding ' + generatedMainFile + ' to source dirs'
        mkdir generatedMain
        sourceDirs += generatedMainFile
        println sourceDirs
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "------------------------------------------------------------------------------------"
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                println "------------------------------------------------------------------------------------"
            }
        }
    }
}

//Always reruns all non-performance tests displaying just failing items
task testCore(type: Test) {
    outputs.upToDateWhen {false}
    testLogging {
        events "failed"
    }
    useJUnit {
        excludeCategories 'com.smeup.rpgparser.PerformanceTest'
    }
}

test {
    systemProperty 'featuresFactory', System.getProperty('featuresFactory', 'default')
    testLogging {
        events "failed"
    }
    useJUnit {
        excludeCategories 'com.smeup.rpgparser.PerformanceTest'
    }
}

//If you want to collect data about failed performance tests, run this task with:
//gradlew testPerformance -DexportCsvFile="/some/file.csv"
task testPerformance(type: Test) {
    systemProperty 'exportCsvFile', System.getProperty('exportCsvFile')
    systemProperty 'featuresFactory', System.getProperty('featuresFactory', 'default')
    maxHeapSize = "2048m"
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnit {
        includeCategories 'com.smeup.rpgparser.PerformanceTest'
    }
}

task testAll(type: Test) {
    systemProperty 'featuresFactory', System.getProperty('featuresFactory', 'default')
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams true
    }
}

//gradlew runExample -Pargs="CALCFIB,9"
task runExample (type: JavaExec) {
    if (project.hasProperty('programArgs')){
        args(project.getProperties().get("programArgs").split(','))
    }
    main="com.smeup.rpgparser.execution.RunnerKt"
    classpath = sourceSets.test.runtimeClasspath
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.smeup.rpgparser.execution.RunnerKt'
    }
    archiveBaseName = project.name + '-all'
    archiveVersion = ''
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//Creates smeup-rpg/rpgJavaInterpreter-core/build/libs/rpgJavaInterpreter-core-mute-all.jar
task fatMuteJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.smeup.rpgparser.mute.StandaloneMuteRunner'
    }
    archiveBaseName = project.name + '-mute-all'
    archiveVersion = ''
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//gradlew runMutes -PmuteDir="/some/dir"
task runMutes(type: JavaExec) {
    dependsOn compileKotlin

    def muteDir = '../mutes_for_ci'
    if (project.hasProperty("muteDir")){
        muteDir = project.getProperties().get("muteDir")
        println 'Mute directory is ' + muteDir
    }
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.smeup.rpgparser.mute.MuterunnerKt'
    args muteDir, "-v", "-lc", "../mutes_for_ci/mute_logging.config"
}

task profileRpgProgram(type: JavaExec) {
    systemProperty 'featuresFactory', System.getProperty('featuresFactory', 'default')
    String usage = """Usage:
>./gradlew $name -PrpgProgram=rpg_program_path
rpg_program_path is RPG program relative or absoulte path.
Relative path is \"relative\" to  ${rootDir.path} directory."""
    classpath = sourceSets.main.runtimeClasspath
    main = "com.smeup.rpgparser.mute.StandaloneMuteRunner"
    description = """profileRpgProgram allows to understand how Jariko interprets any RPG Program.
It creates a jfr file (java flight recorder) containing profiling informations. 
After task execution, you can analize jfr file with JMC utility (Oracle Java Mission Control).

$usage
"""
    ignoreExitValue = true
    doFirst {
        if (project.hasProperty("rpgProgram")) {
            String timestamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
            File rpgProgramFile = new File(project.rpgProgram)
            File jfrPath =  new File(buildDir.path, "jfr/$timestamp-${rpgProgramFile.name}.jfr")
            if (!jfrPath.getParentFile().exists()) {
                jfrPath.getParentFile().mkdirs()
            }
            boolean absolute = project.rpgProgram.matches("^\\w:.+|^/.+")
            if (absolute) {
                args "$project.rpgProgram"
            }
            else {
                args "${rootDir.path}/$project.rpgProgram"
            }
            jvmArgs "-XX:+UnlockCommercialFeatures",
                    "-XX:+FlightRecorder",
                    "-XX:StartFlightRecording=duration=100s,filename=${jfrPath.path},settings=${rootDir.path}/profiling.jfc",
                    "-XX:FlightRecorderOptions=${project.FlightRecorderOptions}",
                    "-XX:+UnlockDiagnosticVMOptions",
                    "-XX:+DebugNonSafepoints"
        }
        else {
            String messageError = """Missing parameter rpgProgram.
${usage} 
Type: ./gradlew help --task $name
for further informations."""
            throw new IllegalArgumentException(messageError)
        }
    }
}

task profileMainClass (type: JavaExec) {
    systemProperty 'featuresFactory', System.getProperty('featuresFactory', 'default')
    String usage = """Usage:
>./gradlew $name -PmainClass=main_class
Remember that for kotlin main_class (.kt source file extension) you need to append the suffix Kt in the class name. 
For example if your kotlin class is  foo.HelloWorld, the command syntax will be:
>./gradlew $name -PmainClass=foo.HelloWorldKt
"""
    classpath = sourceSets.test.runtimeClasspath
    description = """$name allows to profile a main class.
It creates a jfr file (java flight recorder) containing profiling informations. 
After task execution, you can analize jfr file with JMC utility (Oracle Java Mission Control).

$usage
"""
    ignoreExitValue = true
    doFirst {
        if (project.hasProperty("mainClass")) {
            main = project.mainClass
            String timestamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
            File rpgProgramFile = new File(project.mainClass.substring(project.mainClass.lastIndexOf(".") + 1))
            File jfrPath =  new File(buildDir.path, "jfr/$timestamp-${rpgProgramFile.name}.jfr")
            if (!jfrPath.getParentFile().exists()) {
                jfrPath.getParentFile().mkdirs()
            }
            jvmArgs "-XX:+UnlockCommercialFeatures",
                    "-XX:+FlightRecorder",
                    "-XX:StartFlightRecording=duration=100s,filename=${jfrPath.path}",
                    "-XX:FlightRecorderOptions=${project.FlightRecorderOptions}",
                    "-XX:+UnlockDiagnosticVMOptions",
                    "-XX:+DebugNonSafepoints"
        }
        else {
            String messageError = """Missing parameter mainClass.
${usage} 
Type: ./gradlew help --task $name
for further informations."""
            throw new IllegalArgumentException(messageError)
        }
    }
}

check.dependsOn runMutes
